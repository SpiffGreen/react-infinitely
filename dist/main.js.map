{"mappings":";;;;;;;;;;;;;;;;ACAA;;AAEA,MAAM,6BAAO,GAAG;IACd,IAAI,EAAE,IAAI;IACV,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE,IAAI;CAChB,AAAC;AAEF,MAAM,kCAAY,iBAAG,sCAAC,KAAG;;;;aAAO,AAAC;AAEjC,MAAM,oCAAc,GAAG,CAAC,UACtB,MAAM,CAAA,cACN,UAAU,CAAA,SACV,KAAK,CAAA,WACL,OAAO,CAAA,YACP,QAAQ,CAAA,EAC0G,GAAK;IACvH,MAAM,UAAU,GAAG,CAAA,GAAA,mBAAM,CAAA,CAAiB,IAAI,CAAC,AAAC;IAChD,MAAM,QAAQ,GAAG,CAAA,GAAA,mBAAM,CAAA,EAAwB,AAAC;IAChD,QAAQ,CAAC,OAAO,GAAG,IAAI,oBAAoB,CACzC,cAAc,EACd,6BAAO,CACR,CAAC;IACF,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,CAAA,GAAA,qBAAQ,CAAA,CAAC,KAAK,CAAC,AAAC;IAE5D,SAAS,cAAc,CAAC,OAAoC,EAAE;QAC5D,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,AAAC;QACxB,IAAG,CAAC,KAAK,CAAC,cAAc,EAAE,OAAO,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAC1D,iBAAiB,CAAC,IAAI,CAAC,CAAC;KACzB;IAED,CAAA,GAAA,sBAAS,CAAA,CAAC,IAAM;QACd,yDAAyD;QACzD,IAAG,cAAc,EACf,OAAO,IAAI,KAAK,EAAE,CAAC,CAAC,0CAA0C;KAEjE,EAAE;QAAC,cAAc;KAAC,CAAC,CAAC;IAErB,CAAA,GAAA,sBAAS,CAAA,CAAC,IAAM;QACd,sBAAsB;QACtB,MAAM,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,IAAM;YAChD,MAAM,WAAE,OAAO,CAAA,EAAE,GAAG,UAAU,AAAC;YAC/B,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAgB,CAAC;SACnD,CAAC,CAAC;QACH,OAAO,IAAM;YACX,QAAQ,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC;SAChC,CAAA;KACF,EAAE;QAAC,UAAU;KAAC,CAAC,CAAC;IAEjB,qBACE,sCAAC,KAAG;QAAC,SAAS,EAAC,4BAA4B;;0BACzC,sCAAC,KAAG;gBAAC,SAAS,EAAC,wBAAwB;0BACpC,QAAQ;;;;;yBACL;0BACN,sCAAC,KAAG;gBAAC,SAAS,EAAC,mCAAmC;gBAAC,GAAG,EAAE,UAAU;0BAC/D,OAAO,GAAG,MAAM,GAAG,UAAU;;;;;yBAC1B;;;;;;iBACF,CACN;CACH;AAED,oCAAc,CAAC,YAAY,GAAG;IAC5B,UAAU,EAAE,kCAAY;IACxB,MAAM,EAAE,kCAAY;CACrB;IAED,wCAA8B,GAAf,oCAAc;;ADlE7B;IACA,wCAA8B,GAAf,CAAA,GAAA,iCAAc,CAAA","sources":["src/index.tsx","src/lib/InfiniteScroll.tsx"],"sourcesContent":["import InfiniteScroll from \"./lib/InfiniteScroll\";\nexport default InfiniteScroll;","import { ReactElement, useEffect, useRef, useState } from \"react\";\n\nconst OPTIONS = {\n  root: null,\n  rootMargin: \"0px\",\n  threshold: 0.05\n};\n\nconst EmptyDisplay = <div></div>;\n\nconst InfiniteScroll = ({\n  loader,\n  endDisplay,\n  onEnd,\n  hasMore,\n  children\n}: { loader: ReactElement, endDisplay: ReactElement, hasMore: Boolean, onEnd: () => void, children: ReactElement[] }) => {\n  const loadingRef = useRef<HTMLDivElement>(null);\n  const observer = useRef<IntersectionObserver>();\n  observer.current = new IntersectionObserver(\n    handleObserver,\n    OPTIONS\n  );\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  function handleObserver(entries: IntersectionObserverEntry[]) {\n    const [entry] = entries;\n    if(!entry.isIntersecting) return setIsIntersecting(false);\n    setIsIntersecting(true);\n  }\n\n  useEffect(() => {\n    // Perform fetch operation if loader container is in view\n    if(isIntersecting) {\n      hasMore && onEnd(); // call onEnd method if more content exist\n    };\n  }, [isIntersecting]);\n\n  useEffect(() => {\n    // initialize observer\n    window.addEventListener(\"DOMContentLoaded\", () => {\n      const { current } = loadingRef;\n      observer.current?.observe(current as HTMLElement);\n    });\n    return () => {\n      observer.current?.disconnect();\n    }\n  }, [loadingRef]);\n  \n  return (\n    <div className=\"infinite-scroll__container\">\n      <div className=\"infinite-scroll__items\">\n        {children}\n      </div>\n      <div className=\"infinite-scroll__loader-container\" ref={loadingRef}>\n        {hasMore ? loader : endDisplay}\n      </div>\n    </div>\n  );\n}\n\nInfiniteScroll.defaultProps = {\n  endDisplay: EmptyDisplay,\n  loader: EmptyDisplay\n}\n\nexport default InfiniteScroll;"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}